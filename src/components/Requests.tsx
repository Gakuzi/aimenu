// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–º—å–µ. –†–µ–∞–ª–∏–∑—É–µ—Ç —á–∞—Ç-–ø–æ–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —á–ª–µ–Ω–∞–º–∏ —Å–µ–º—å–∏.

import React, { useState, useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import { getFamilyRequests, sendFamilyRequest } from '../services/firebaseService';

interface Request {
  id: string;
  text: string;
  author: string;
  timestamp: string;
  type: 'purchase' | 'menu' | 'message';
}

const Requests: React.FC = () => {
  const { familyId } = useAppContext();
  const [requests, setRequests] = useState<Request[]>([]);
  const [newRequest, setNewRequest] = useState('');
  const [requestType, setRequestType] = useState<'purchase' | 'menu' | 'message'>('message');
  const [loading, setLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Firebase
  useEffect(() => {
    if (!familyId) return;

    let unsubscribe: (() => void) | null = null;
    
    getFamilyRequests(familyId, (requestsData) => {
      setRequests(requestsData);
    }).then(unsub => {
      unsubscribe = unsub || null;
    });

    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
    };
  }, [familyId]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleSendRequest = async () => {
    if (!newRequest.trim() || !familyId) return;

    setLoading(true);
    try {
      await sendFamilyRequest(familyId, {
        text: newRequest,
        author: '–Ø',
        type: requestType
      });

      setNewRequest('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.');
    } finally {
      setLoading(false);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (!familyId) {
    return (
      <div className="requests-container">
        <h2>–ó–∞–ø—Ä–æ—Å—ã —Å–µ–º—å–∏</h2>
        <p>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å–µ–º—å–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.</p>
      </div>
    );
  }

  return (
    <div className="requests-container">
      <h2>–ó–∞–ø—Ä–æ—Å—ã —Å–µ–º—å–∏</h2>
      
      <div className="requests-list">
        {requests.length === 0 ? (
          <p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!</p>
        ) : (
          requests.map(request => (
            <div key={request.id} className={`request-item ${request.type}`}>
              <div className="request-header">
                <span className="request-author">{request.author}</span>
                <span className="request-time">{formatTime(request.timestamp)}</span>
                <span className={`request-type ${request.type}`}>
                  {request.type === 'purchase' ? 'üõí' : 
                   request.type === 'menu' ? 'üçΩÔ∏è' : 'üí¨'}
                </span>
              </div>
              <div className="request-text">{request.text}</div>
            </div>
          ))
        )}
      </div>
      
      <div className="new-request">
        <div className="request-type-selector">
          <label htmlFor="request-type">–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:</label>
          <select 
            id="request-type"
            value={requestType} 
            onChange={(e) => setRequestType(e.target.value as any)}
          >
            <option value="message">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ</option>
            <option value="purchase">üõí –ü—Ä–æ—Å—å–±–∞ –∫—É–ø–∏—Ç—å</option>
            <option value="menu">üçΩÔ∏è –û–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ–Ω—é</option>
          </select>
        </div>
        <div className="request-input-container">
          <input
            type="text"
            value={newRequest}
            onChange={(e) => setNewRequest(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            onKeyPress={(e) => e.key === 'Enter' && handleSendRequest()}
            disabled={loading}
          />
          <button 
            className="send-button"
            onClick={handleSendRequest}
            disabled={!newRequest.trim() || loading}
          >
            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Requests;