// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –º–∞—Å—Ç–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –º–µ–Ω—é –∏ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.

import React, { useState, useEffect } from 'react';
import './styles/global.css';

const App: React.FC = () => {
  const [currentScreen, setCurrentScreen] = useState<'splash' | 'welcome' | 'setup' | 'main' | 'family' | 'menu' | 'shopping' | 'budget' | 'calendar' | 'settings'>('splash');
  const [geminiKey, setGeminiKey] = useState<string>('');
  const [setupStep, setSetupStep] = useState<number>(1);
  const [settings, setSettings] = useState<any>({
    people: 3,
    restrictions: [],
    protein: 'chicken',
    days: 7,
    budget: 10000,
    family: []
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ API –∫–ª—é—á –≤ localStorage
  useEffect(() => {
    const savedKey = localStorage.getItem('geminiKey');
    if (savedKey) {
      setGeminiKey(savedKey);
      setCurrentScreen('main');
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º splash screen –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
      const timer = setTimeout(() => {
        setCurrentScreen('welcome');
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, []);

// saveApiKey function removed as it was unused

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const nextSetupStep = () => {
    if (setupStep < 5) {
      setSetupStep(setupStep + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      localStorage.setItem('settings', JSON.stringify(settings));
      setCurrentScreen('main');
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const prevSetupStep = () => {
    if (setupStep > 1) {
      setSetupStep(setupStep - 1);
    }
  };

  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const skipSetupStep = () => {
    nextSetupStep();
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const updateSettings = (newSettings: any) => {
    setSettings({ ...settings, ...newSettings });
  };

  // Splash Screen
  if (currentScreen === 'splash') {
    return (
      <div id="splash-screen">
        <div className="splash-logo">
          {/* SVG –ª–æ–≥–æ—Ç–∏–ø */}
          <svg width="100" height="100" viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="1024" height="1024" rx="232" fill="#F9F7F4"/>
            <path d="M512 739C456.91 739 417 720.09 417 665C417 609.91 456.91 591 512 591C567.09 591 607 609.91 607 665C607 720.09 567.09 739 512 739Z" fill="#8B5E3C"/>
            <path d="M512 718C468.43 718 433 696.57 433 665C433 633.43 468.83 612 512 612C555.57 612 591 633.43 591 665C591 696.57 555.57 718 512 718Z" fill="white"/>
            <path d="M512 344C512 344 536 385 512 409C488 385 512 344 512 344Z" fill="#D4A373" opacity="0.5"/>
            <path d="M484 326C484 326 503 354.6 484 376C465 354.6 484 326 484 326Z" fill="#D4A373" opacity="0.5"/>
            <path d="M540 326C501 326 597 358.6 540 376C573 358.6 540 326 540 326Z" fill="#D4A373" opacity="0.5"/>
          </svg>
        </div>
        <h1 className="splash-title">–°–ï–ú–ï–ô–ù–û–ï –ú–ï–ù–Æ</h1>
        <p className="splash-subtitle">–ó–¥–µ—Å—å –≤–∞—à–∞ —Å–µ–º—å—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –ò–ò, —á—Ç–æ–±—ã –≥–æ—Ç–æ–≤–∏—Ç—å —Å –ª—é–±–æ–≤—å—é.</p>
        
        <div className="splash-features">
          <div className="feature-slide">
            <div className="feature-icon">ü§ñ</div>
            <div className="feature-text">–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é</div>
          </div>
          <div className="feature-slide">
            <div className="feature-icon">üìã</div>
            <div className="feature-text">–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫</div>
          </div>
          <div className="feature-slide">
            <div className="feature-icon">üí∞</div>
            <div className="feature-text">–ë—é–¥–∂–µ—Ç –∏ —Ü–µ–Ω—ã</div>
          </div>
        </div>
        
        <p className="splash-author">
          –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç —Å –ª—é–±–æ–≤—å—é<br/>
          ¬© 2025 –°–ï–ú–ï–ô–ù–û–ï –ú–ï–ù–Æ
        </p>
      </div>
    );
  }

  // Welcome Screen
  if (currentScreen === 'welcome') {
    return (
      <div id="welcome-screen" className="screen">
        <div className="welcome-logo">
          <svg width="80" height="80" viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="1024" height="1024" rx="232" fill="#F9F7F4"/>
            <path d="M512 739C456.91 739 417 720.09 417 665C417 609.91 456.91 591 512 591C567.09 591 607 609.91 607 665C607 720.09 567.09 739 512 739Z" fill="#8B5E3C"/>
            <path d="M512 718C468.43 718 433 696.57 433 665C433 633.43 468.83 612 512 612C555.57 612 591 633.43 591 665C591 696.57 555.57 718 512 718Z" fill="white"/>
            <path d="M512 344C512 344 536 385 512 409C488 385 512 344 512 344Z" fill="#D4A373" opacity="0.5"/>
            <path d="M484 326C484 326 503 354.6 484 376C465 354.6 484 326 484 326Z" fill="#D4A373" opacity="0.5"/>
            <path d="M540 326C501 326 597 358.6 540 376C573 358.6 540 326 540 326Z" fill="#D4A373" opacity="0.5"/>
          </svg>
        </div>
        <h1 className="welcome-title">–°–ï–ú–ï–ô–ù–û–ï –ú–ï–ù–Æ</h1>
        <p className="welcome-subtitle">–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –≤–∞—à–µ–π —Å–µ–º—å–∏</p>
        
        <div className="welcome-buttons">
          <button id="start-app-btn" onClick={() => setCurrentScreen('setup')}>
            –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
          </button>
          <button className="secondary-button" onClick={() => setCurrentScreen('setup')}>
            –£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á API
          </button>
        </div>
        
        <p className="welcome-info">
          –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.<br/>
          –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è Google Gemini API –∫–ª—é—á.
        </p>
      </div>
    );
  }

  // Setup Screen
  if (currentScreen === 'setup') {
    return (
      <div id="setup-screen" className="screen">
        <div className="setup-container">
          <div className="setup-logo">
            <svg width="80" height="80" viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect width="1024" height="1024" rx="232" fill="#F9F7F4"/>
              <path d="M512 739C456.91 739 417 720.09 417 665C417 609.91 456.91 591 512 591C567.09 591 607 609.91 607 665C607 720.09 567.09 739 512 739Z" fill="#8B5E3C"/>
              <path d="M512 718C468.43 718 433 696.57 433 665C433 633.43 468.83 612 512 612C555.57 612 591 633.43 591 665C591 696.57 555.57 718 512 718Z" fill="white"/>
              <path d="M512 344C512 344 536 385 512 409C488 385 512 344 512 344Z" fill="#D4A373" opacity="0.5"/>
              <path d="M484 326C484 326 503 354.6 484 376C465 354.6 484 326 484 326Z" fill="#D4A373" opacity="0.5"/>
              <path d="M540 326C501 326 597 358.6 540 376C573 358.6 540 326 540 326Z" fill="#D4A373" opacity="0.5"/>
            </svg>
          </div>
          <h1 className="setup-title">–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
          <p className="setup-subtitle">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ò–ò –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é</p>
          
          <div id="setup-wizard">
            {/* –®–∞–≥ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ */}
            {setupStep === 1 && (
              <div className="wizard-step active">
                <div className="wizard-step-counter">–®–∞–≥ 1 –∏–∑ 5</div>
                <h2 className="wizard-step-title">–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ —Å–µ–º—å–µ?</h2>
                <p className="wizard-step-description">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ò–ò —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ü–∏–∏ –∏ –∫–∞–ª–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</p>
                
                <div className="input-group">
                  <label htmlFor="people-range">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {settings.people}</label>
                  <input 
                    id="people-range"
                    type="range" 
                    min="1" 
                    max="6" 
                    value={settings.people} 
                    onChange={(e) => updateSettings({ people: parseInt(e.target.value) })}
                    style={{ width: '100%' }}
                  />
                  <div style={{ textAlign: 'center', fontSize: '2rem', fontWeight: 'bold', color: '#8B5E3C' }}>
                    {settings.people}
                  </div>
                </div>
                
                <div id="wizard-nav">
                  <button className="secondary-button" onClick={skipSetupStep}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                  <button className="primary-button" onClick={nextSetupStep}>–î–∞–ª–µ–µ</button>
                </div>
              </div>
            )}
            
            {/* –®–∞–≥ 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è */}
            {setupStep === 2 && (
              <div className="wizard-step active">
                <div className="wizard-step-counter">–®–∞–≥ 2 –∏–∑ 5</div>
                <h2 className="wizard-step-title">–ö–∞–∫–∏–µ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?</h2>
                <p className="wizard-step-description">–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—ã –Ω–µ –µ–¥–∏—Ç–µ ‚Äî —á—Ç–æ–±—ã –ò–ò –∏—Å–∫–ª—é—á–∏–ª –∏—Ö –∏–∑ –º–µ–Ω—é. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.</p>
                
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px', margin: '20px 0' }}>
                  {['–ë–µ–∑ —Ä—ã–±—ã', '–ë–µ–∑ –≥—Ä–∏–±–æ–≤', '–ë–µ–∑ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–ë–µ–∑ —è–∏—Ü', '–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞', '–ë–µ–∑ –≥–ª—É—Ç–∞–º–∞—Ç–∞'].map((restriction) => (
                    <div key={restriction} style={{ display: 'flex', alignItems: 'center' }}>
                      <input 
                        type="checkbox" 
                        id={restriction} 
                        checked={settings.restrictions.includes(restriction)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            updateSettings({ restrictions: [...settings.restrictions, restriction] });
                          } else {
                            updateSettings({ restrictions: settings.restrictions.filter((r: string) => r !== restriction) });
                          }
                        }}
                        style={{ width: '20px', height: '20px', marginRight: '10px' }}
                      />
                      <label htmlFor={restriction} style={{ margin: 0 }}>{restriction}</label>
                    </div>
                  ))}
                </div>
                
                <div className="input-group">
                  <label htmlFor="other-restrictions">–î—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</label>
                  <input 
                    type="text" 
                    id="other-restrictions" 
                    placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—è, –æ—Ä–µ—Ö–∏"
                    value={settings.otherRestrictions || ''}
                    onChange={(e) => updateSettings({ otherRestrictions: e.target.value })}
                  />
                </div>
                
                <div id="wizard-nav">
                  <button className="secondary-button" onClick={prevSetupStep}>–ù–∞–∑–∞–¥</button>
                  <button className="secondary-button" onClick={skipSetupStep}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                  <button className="primary-button" onClick={nextSetupStep}>–î–∞–ª–µ–µ</button>
                </div>
              </div>
            )}
            
            {/* –®–∞–≥ 3: –û—Å–Ω–æ–≤–Ω–æ–π –±–µ–ª–æ–∫ */}
            {setupStep === 3 && (
              <div className="wizard-step active">
                <div className="wizard-step-counter">–®–∞–≥ 3 –∏–∑ 5</div>
                <h2 className="wizard-step-title">–ö–∞–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –±–µ–ª–æ–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?</h2>
                <p className="wizard-step-description">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞ ‚Äî –ò–ò –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</p>
                
                <div style={{ display: 'grid', gap: '15px', margin: '20px 0' }}>
                  {[
                    { value: 'chicken', label: '–ö—É—Ä–∏—Ü–∞', description: '–õ—ë–≥–∫–∞—è, –¥–æ—Å—Ç—É–ø–Ω–∞—è, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è' },
                    { value: 'beef', label: '–ì–æ–≤—è–¥–∏–Ω–∞', description: '–ë–æ–≥–∞—Ç–∞—è –∂–µ–ª–µ–∑–æ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö' },
                    { value: 'pork', label: '–°–≤–∏–Ω–∏–Ω–∞', description: '–°–æ—á–Ω–∞—è, –≤–∫—É—Å–Ω–∞—è, –Ω–æ —Ç—è–∂–µ–ª–µ–µ –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è' },
                    { value: 'vegetarian', label: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', description: '–ù–∞ –æ—Å–Ω–æ–≤–µ –±–æ–±–æ–≤—ã—Ö, —Ç–æ—Ñ—É, —è–∏—Ü, —Å—ã—Ä–∞' }
                  ].map((protein) => (
                    <div 
                      key={protein.value}
                      onClick={() => updateSettings({ protein: protein.value })}
                      style={{
                        padding: '15px',
                        border: `2px solid ${settings.protein === protein.value ? '#8B5E3C' : '#E0E0E0'}`,
                        borderRadius: '12px',
                        cursor: 'pointer',
                        backgroundColor: settings.protein === protein.value ? 'rgba(139, 94, 60, 0.05)' : 'white'
                      }}
                    >
                      <div style={{ fontWeight: 'bold', fontSize: '1.1rem' }}>{protein.label}</div>
                      <div style={{ color: '#7D7D7D', marginTop: '5px' }}>{protein.description}</div>
                    </div>
                  ))}
                </div>
                
                <div id="wizard-nav">
                  <button className="secondary-button" onClick={prevSetupStep}>–ù–∞–∑–∞–¥</button>
                  <button className="secondary-button" onClick={skipSetupStep}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                  <button className="primary-button" onClick={nextSetupStep}>–î–∞–ª–µ–µ</button>
                </div>
              </div>
            )}
            
            {/* –®–∞–≥ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π */}
            {setupStep === 4 && (
              <div className="wizard-step active">
                <div className="wizard-step-counter">–®–∞–≥ 4 –∏–∑ 5</div>
                <h2 className="wizard-step-title">–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –¥–ª—è –º–µ–Ω—é?</h2>
                <p className="wizard-step-description">
                  –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é?<br/>
                  7 –¥–Ω–µ–π ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏.<br/>
                  3 –¥–Ω—è ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á–∞—â–µ –º–µ–Ω—è—Ç—å.<br/>
                  1 –¥–µ–Ω—å ‚Äî –¥–ª—è —Ç–µ—Å—Ç–∞.
                </p>
                
                <div className="input-group">
                  <label htmlFor="days-range">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {settings.days} {settings.days === 1 ? '–¥–µ–Ω—å' : settings.days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}</label>
                  <input 
                    id="days-range"
                    type="range" 
                    min="1" 
                    max="7" 
                    step="2"
                    value={settings.days} 
                    onChange={(e) => updateSettings({ days: parseInt(e.target.value) })}
                    style={{ width: '100%' }}
                  />
                  <div style={{ textAlign: 'center', fontSize: '2rem', fontWeight: 'bold', color: '#8B5E3C' }}>
                    {settings.days} {settings.days === 1 ? '–¥–µ–Ω—å' : settings.days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
                  </div>
                </div>
                
                <p style={{ textAlign: 'center', color: '#7D7D7D', marginTop: '10px' }}>
                  –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º 7 –¥–Ω–µ–π ‚Äî —ç—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
                </p>
                
                <div id="wizard-nav">
                  <button className="secondary-button" onClick={prevSetupStep}>–ù–∞–∑–∞–¥</button>
                  <button className="secondary-button" onClick={skipSetupStep}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                  <button className="primary-button" onClick={nextSetupStep}>–î–∞–ª–µ–µ</button>
                </div>
              </div>
            )}
            
            {/* –®–∞–≥ 5: –ë—é–¥–∂–µ—Ç */}
            {setupStep === 5 && (
              <div className="wizard-step active">
                <div className="wizard-step-counter">–®–∞–≥ 5 –∏–∑ 5</div>
                <h2 className="wizard-step-title">–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª–∏—Ç—å?</h2>
                <p className="wizard-step-description">
                  –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥?<br/>
                  –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ò–ò –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –≤–∞—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
                </p>
                
                <div className="input-group">
                  <label htmlFor="budget">–ë—é–¥–∂–µ—Ç (‚ÇΩ):</label>
                  <input 
                    type="number" 
                    id="budget" 
                    placeholder="10000"
                    value={settings.budget || ''}
                    onChange={(e) => updateSettings({ budget: parseInt(e.target.value) || 0 })}
                  />
                </div>
                
                <p style={{ textAlign: 'center', color: '#7D7D7D', marginTop: '10px' }}>
                  –ü—Ä–∏–º–µ—Ä: 7 –¥–Ω–µ–π –¥–ª—è {settings.people} {settings.people === 1 ? '—á–µ–ª–æ–≤–µ–∫–∞' : settings.people < 5 ? '—á–µ–ª–æ–≤–µ–∫' : '—á–µ–ª–æ–≤–µ–∫'} ‚Äî —Å—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç 6 000‚Äì8 000 ‚ÇΩ
                </p>
                
                <div id="wizard-nav">
                  <button className="secondary-button" onClick={prevSetupStep}>–ù–∞–∑–∞–¥</button>
                  <button className="secondary-button" onClick={skipSetupStep}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                  <button className="primary-button" onClick={nextSetupStep}>–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // Main Screen (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  return (
    <div id="main-screen" className="screen">
      <div className="main-header">
        –°–ï–ú–ï–ô–ù–û–ï –ú–ï–ù–Æ
      </div>
      
      <div className="content-area">
        {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ–º–µ–π–Ω–æ–µ –ú–µ–Ω—é!</h2>
          <p>–í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.</p>
          <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</p>
          <ul style={{ textAlign: 'left', display: 'inline-block' }}>
            <li>–õ—é–¥–µ–π –≤ —Å–µ–º—å–µ: {settings.people}</li>
            <li>–î–Ω–µ–π –≤ –º–µ–Ω—é: {settings.days}</li>
            <li>–ë—é–¥–∂–µ—Ç: {settings.budget} ‚ÇΩ</li>
            <li>–û—Å–Ω–æ–≤–Ω–æ–π –±–µ–ª–æ–∫: {settings.protein === 'chicken' ? '–ö—É—Ä–∏—Ü–∞' : 
                               settings.protein === 'beef' ? '–ì–æ–≤—è–¥–∏–Ω–∞' : 
                               settings.protein === 'pork' ? '–°–≤–∏–Ω–∏–Ω–∞' : '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π'}</li>
          </ul>
          <button onClick={() => setCurrentScreen('menu')}>
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é
          </button>
        </div>
      </div>
      
      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="bottom-nav">
        <button className="nav-button" onClick={() => setCurrentScreen('main')}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9,22 9,12 15,12 15,22"></polyline>
          </svg>
          <span>–ì–ª–∞–≤–Ω–∞—è</span>
        </button>
        <button className="nav-button" onClick={() => setCurrentScreen('menu')}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
            <line x1="3" y1="6" x2="21" y2="6"></line>
            <path d="M16 10a4 4 0 0 1-8 0"></path>
          </svg>
          <span>–ú–µ–Ω—é</span>
        </button>
        <button className="nav-button" onClick={() => setCurrentScreen('shopping')}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <circle cx="9" cy="21" r="1"></circle>
            <circle cx="20" cy="21" r="1"></circle>
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
          </svg>
          <span>–ü–æ–∫—É–ø–∫–∏</span>
        </button>
        <button className="nav-button" onClick={() => setCurrentScreen('budget')}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <line x1="12" y1="1" x2="12" y2="23"></line>
            <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
          </svg>
          <span>–ë—é–¥–∂–µ—Ç</span>
        </button>
        <button className="nav-button" onClick={() => setCurrentScreen('settings')}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <circle cx="12" cy="12" r="3"></circle>
            <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
          </svg>
          <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
        </button>
      </div>
    </div>
  );
};

export default App;